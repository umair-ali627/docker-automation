"""Create connections table and add provider columns

Revision ID: 3fa53a651f39
Revises: 5ded2931ce14
Create Date: 2025-08-22 22:31:31.830963

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3fa53a651f39'
down_revision: Union[str, None] = '5ded2931ce14'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('connections',
    sa.Column('room_id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('system_prompt', sa.Text(), nullable=False),
    sa.Column('greeting', sa.String(), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('llm_provider_id', sa.UUID(), nullable=False),
    sa.Column('tts_provider_id', sa.UUID(), nullable=False),
    sa.Column('stt_provider_id', sa.UUID(), nullable=False),
    sa.Column('llm_options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tts_options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('stt_options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('allow_interruptions', sa.Boolean(), nullable=True),
    sa.Column('profile_options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('interrupt_speech_duration', sa.Float(), nullable=True),
    sa.Column('interrupt_min_words', sa.Integer(), nullable=True),
    sa.Column('min_endpointing_delay', sa.Float(), nullable=True),
    sa.Column('max_endpointing_delay', sa.Float(), nullable=True),
    sa.Column('max_nested_function_calls', sa.Integer(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agent_profiles.id'], ),
    sa.ForeignKeyConstraint(['llm_provider_id'], ['llm_providers.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['stt_provider_id'], ['stt_providers.id'], ),
    sa.ForeignKeyConstraint(['tts_provider_id'], ['tts_providers.id'], ),
    sa.PrimaryKeyConstraint('room_id')
    )
    op.create_index(op.f('ix_connections_name'), 'connections', ['name'], unique=False)
    
    # Fill NULL values before setting nullable=False
    op.execute("UPDATE llm_providers SET created_at = now() WHERE created_at IS NULL")
    op.execute("UPDATE llm_providers SET updated_at = now() WHERE updated_at IS NULL")
    op.execute("UPDATE stt_providers SET created_at = now() WHERE created_at IS NULL")
    op.execute("UPDATE stt_providers SET updated_at = now() WHERE updated_at IS NULL")
    op.execute("UPDATE tts_providers SET created_at = now() WHERE created_at IS NULL")
    op.execute("UPDATE tts_providers SET updated_at = now() WHERE updated_at IS NULL")
    
    op.alter_column('llm_providers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('llm_providers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('stt_providers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('stt_providers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('tts_providers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('tts_providers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('tts_providers', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('tts_providers', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('stt_providers', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('stt_providers', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('llm_providers', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('llm_providers', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index(op.f('ix_connections_name'), table_name='connections')
    op.drop_table('connections')
    # ### end Alembic commands ###