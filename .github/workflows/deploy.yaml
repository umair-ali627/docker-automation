name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  LIVEKIT_URL: ${{ secrets.LIVEKIT_URL }}
  LIVEKIT_API_KEY: ${{ secrets.LIVEKIT_API_KEY }}
  LIVEKIT_API_SECRET: ${{ secrets.LIVEKIT_API_SECRET }}
  CARTESIA_API_KEY: ${{ secrets.CARTESIA_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY }}
  QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
  QDRANT_URL: ${{ secrets.QDRANT_URL }}
  UPLIFT_API_KEY: ${{ secrets.UPLIFT_API_KEY }}
  ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GITHUB_REPOSITORY: ${{ github.repository }}

jobs:
  deploy:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker permissions
      run: |
        sudo chown $USER:docker /var/run/docker.sock
        sudo chmod 666 /var/run/docker.sock
    
    - name: Install Docker Compose
      run: |
        # Check Docker Compose version
        if ! command -v docker compose &> /dev/null; then
          echo "Installing Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
        fi
        docker compose version || docker-compose --version
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      run: |
        echo "repo_lowercase=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        echo "GITHUB_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true
        use: true
        driver-opts: |
          image=moby/buildkit:latest
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ env.repo_lowercase }}/smartvoice:latest
          ghcr.io/${{ env.repo_lowercase }}/smartvoice:${{ github.sha }}
        no-cache: true
        
    - name: Create .env file
      run: |
        # Create .env file in both locations to ensure it's found
        cat << EOF > ./src/.env
        POSTGRES_USER=${POSTGRES_USER}
        POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        POSTGRES_DB=${POSTGRES_DB}
        POSTGRES_SERVER=db
        POSTGRES_PORT=5432
        POSTGRES_URI=postgres:postgres@db:5432/postgres
        POSTGRES_URL=postgresql+asyncpg://postgres:postgres@db:5432/postgres
        REDIS_HOST=redis
        REDIS_PORT=6379
        REDIS_QUEUE_HOST=redis
        REDIS_QUEUE_PORT=6379
        SECRET_KEY="${SECRET_KEY}"
        LIVEKIT_URL="${LIVEKIT_URL}"
        LIVEKIT_API_KEY="${LIVEKIT_API_KEY}"
        LIVEKIT_API_SECRET="${LIVEKIT_API_SECRET}"
        CARTESIA_API_KEY="${CARTESIA_API_KEY}"
        OPENAI_API_KEY="${OPENAI_API_KEY}"
        DEEPGRAM_API_KEY="${DEEPGRAM_API_KEY}"
        QDRANT_API_KEY="${QDRANT_API_KEY}"
        QDRANT_URL="${QDRANT_URL}"
        UPLIFT_API_KEY="${UPLIFT_API_KEY}"
        ELEVENLABS_API_KEY="${ELEVENLABS_API_KEY}"
        EOF
        
        # Also create .env file at the root level for the container to find
        cp ./src/.env ./.env
        
        # Print .env file for debugging (hide secrets)
        echo "Created .env file with the following variables (values hidden):"
        grep -v "_KEY\|_SECRET\|PASSWORD" ./src/.env
        
        # Ensure .env files are accessible
        chmod 644 ./src/.env ./.env
        
    - name: Deploy with Docker Compose
      run: |
        # Export the GitHub repository variable for docker-compose
        export GITHUB_REPOSITORY=${{ env.repo_lowercase }}
        
        # Check if port 8000 is in use and free it
        PORT_PID=$(sudo lsof -t -i:8000 || echo "")
        if [ ! -z "$PORT_PID" ]; then
          echo "Port 8000 is in use by PID $PORT_PID, stopping it..."
          sudo kill -9 $PORT_PID || true
          sleep 2
        fi
        
        # Ensure network exists
        docker network create smartvoice_default || true
        
        # Stop any existing containers
        docker-compose down -v
        docker rm -f smartvoice-web db redis 2>/dev/null || true
        
        # Show that .env file exists
        echo "Environment files:"
        ls -la ./src/.env || echo "No src/.env file"
        
        # Verify the volume mount in docker-compose.yml
        echo "Checking volume mounts in docker-compose.yml..."
        grep -A 5 "volumes:" docker-compose.yml
        
        # Make sure .env file is not in .dockerignore
        grep -v ".env" .dockerignore > .dockerignore.new && mv .dockerignore.new .dockerignore
        echo ".env files are not ignored"
        
        # Create a backup copy of the .env file just in case
        mkdir -p .env-backup
        cp ./src/.env .env-backup/
        
        # Make sure the fix_redis_config.py script is executable
        chmod +x ./src/scripts/fix_redis_config.py
        
        # Pull latest images
        docker-compose pull
        
        # Start the services with explicit configuration to ensure DB credentials match
        echo "Starting database with proper credentials..."
        docker run -d --name db \
          --network=smartvoice_default \
          -p 5432:5432 \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_DB=postgres \
          -v postgres-data-new:/var/lib/postgresql/data \
          postgres:13
        
        echo "Starting Redis..."
        docker run -d --name redis \
          --network=smartvoice_default \
          -p 6379:6379 \
          -v redis-data:/data \
          redis:alpine
        
        echo "Waiting for database to initialize..."
        sleep 5
        
        # Verify database connection before starting web
        echo "Verifying database connection..."
        docker run --rm --network=smartvoice_default postgres:13 \
          psql "postgresql://postgres:postgres@db:5432/postgres" -c "\l" || echo "Database connection test failed"
        
        # Create static directory if it doesn't exist
        mkdir -p src/static
        
        # Copy any static content from repository
        if [ -d "static" ]; then
          echo "Copying static content from repository static directory..."
          cp -r static/* src/static/
        fi
        
        # Copy any additional static content from src/static if it exists separately
        if [ -d "src/static-content" ]; then
          echo "Copying content from src/static-content..."
          cp -r src/static-content/* src/static/
        fi
        
        # Create a minimal index.html file if it doesn't exist
        if [ ! -f "src/static/index.html" ]; then
          echo "Creating minimal index.html file..."
          echo '<!DOCTYPE html>' > src/static/index.html
          echo '<html>' >> src/static/index.html
          echo '<head>' >> src/static/index.html
          echo '  <title>SmartVoice</title>' >> src/static/index.html
          echo '  <meta charset="UTF-8">' >> src/static/index.html
          echo '  <meta name="viewport" content="width=device-width, initial-scale=1.0">' >> src/static/index.html
          echo '</head>' >> src/static/index.html
          echo '<body>' >> src/static/index.html
          echo '  <h1>SmartVoice API</h1>' >> src/static/index.html
          echo '  <p>The API is running. Visit <a href="/docs">/docs</a> for API documentation.</p>' >> src/static/index.html
          echo '</body>' >> src/static/index.html
          echo '</html>' >> src/static/index.html
        fi
        
        # Make sure permissions are correct
        chmod -R 755 src/static
        
        # Start the web service with explicit environment variables
        docker run -d --name smartvoice-web \
          --network=smartvoice_default \
          --add-host=livekit.convoi.ai:52.73.144.4 \
          -p 8000:8000 \
          -e PYTHONPATH=/code/src \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_DB=postgres \
          -e POSTGRES_SERVER=db \
          -e POSTGRES_PORT=5432 \
          -e POSTGRES_URI=postgres:postgres@db:5432/postgres \
          -e POSTGRES_URL=postgresql+asyncpg://postgres:postgres@db:5432/postgres \
          -e REDIS_HOST=redis \
          -e REDIS_PORT=6379 \
          -e REDIS_QUEUE_HOST=redis \
          -e REDIS_QUEUE_PORT=6379 \
          -e LIVEKIT_URL="livekit.convoi.ai" \
          -e LIVEKIT_API_KEY="${LIVEKIT_API_KEY}" \
          -e LIVEKIT_API_SECRET="${LIVEKIT_API_SECRET}" \
          -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
          -e CARTESIA_API_KEY="${CARTESIA_API_KEY}" \
          -e DEEPGRAM_API_KEY="${DEEPGRAM_API_KEY}" \
          -e QDRANT_API_KEY="${QDRANT_API_KEY}" \
          -e QDRANT_URL="${QDRANT_URL}" \
          -e UPLIFT_API_KEY="${UPLIFT_API_KEY}" \
          -e ELEVENLABS_API_KEY="${ELEVENLABS_API_KEY}" \
          -e SECRET_KEY="${SECRET_KEY}" \
          -e ALGORITHM=HS256 \
          -e ACCESS_TOKEN_EXPIRE_MINUTES=360 \
          -e REFRESH_TOKEN_EXPIRE_DAYS=7 \
          -e ENVIRONMENT=production \
          -e COOKIE_SECURE=false \
          -e COOKIE_SAMESITE=lax \
          -e CORS_ORIGINS="*" \
          -e CORS_ALLOW_CREDENTIALS=true \
          -v $(pwd)/src/app:/code/app \
          -v $(pwd)/src/.env:/code/.env \
          -v $(pwd)/src/static:/code/src/static \
          --env-file ./src/.env \
          ghcr.io/${{ env.repo_lowercase }}/smartvoice:latest
        
        # Update LiveKit URL in the .env file - using a different approach
        echo "Updating LiveKit URL using a different approach..."
        docker exec smartvoice-web bash -c "echo 'LIVEKIT_URL=livekit.convoi.ai' > /tmp/livekit_env && cat /tmp/livekit_env >> /code/.env"
        
        # Modify app configurations to handle refresh tokens better - using a different approach
        echo "Updating application to handle refresh tokens better..."
        docker exec smartvoice-web bash -c "echo 'SESSION_MIDDLEWARE_HTTPS_ONLY=false' > /tmp/token_settings"
        docker exec smartvoice-web bash -c "echo 'REFRESH_TOKEN_IN_BODY=true' >> /tmp/token_settings"
        docker exec smartvoice-web bash -c "cat /tmp/token_settings >> /code/.env"
        
        # Restart the application to apply the new configuration
        echo "Restarting the application to apply the new configuration..."
        docker restart smartvoice-web
        
        # Give the application a moment to restart
        sleep 5
        
        # Check the logs of the web container
        echo "Web container logs:"
        docker logs smartvoice-web || echo "Cannot get web logs"
        
        echo "Services started with docker-compose"
        
    - name: Health check
      run: |
        # Wait for the application to be ready
        timeout=300
        echo "Starting health check, will try for ${timeout} seconds..."
        
        # Try different endpoints since /health returns 404
        while ! curl -s http://localhost:8000/ | grep -q "." && ! curl -s http://localhost:8000/docs | grep -q "."; do
          if [ $timeout -le 0 ]; then
            echo "Health check failed after 5 minutes"
            echo "Container logs:"
            docker logs smartvoice-web
            exit 1
          fi
          timeout=$((timeout-5))
          sleep 5
          echo "Waiting for application to become healthy... (${timeout}s remaining)"
        done
        
        echo "Application is healthy!"
        echo "Container status:"
        docker ps
        
    - name: Clean up
      if: always()
      run: |
        # Don't remove .env file in case we need it for debugging
        echo "Deployment complete. Access the application at http://localhost:8000"
        
        # Show logs in case of issues
        if [ $? -ne 0 ]; then
          echo "Deployment failed. Showing logs:"
          docker-compose logs
        fi 

    - name: Prune Docker images
      if: success()
      run: |
        echo "Pruning all unused Docker images to free up space..."
        docker system prune -a -f
        echo "Docker image pruning complete."
        docker images
